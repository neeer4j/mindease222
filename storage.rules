rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isValidContentType(contentType, validTypes) {
      return contentType.matches(validTypes);
    }

    // Avatar rules
    match /avatars/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isOwner(userId) && 
        isValidContentType(request.resource.contentType, 'image/.*') &&
        request.resource.size <= 5 * 1024 * 1024; // 5MB max
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Videos rules - allow read access to all authenticated users
    match /videos/{category}/{videoName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}